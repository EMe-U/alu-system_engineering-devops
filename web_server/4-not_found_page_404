#!/usr/bin/env bash
#
# This script configures Nginx to serve a custom 404 error page

# Update the package list and install Nginx
sudo apt update -y
sudo apt install -y nginx

# Create a custom 404 error page
sudo mkdir -p /var/www/html
echo "Ceci n'est pas une page" | sudo tee /var/www/html/custom_404.html

# Create a new Nginx configuration file to serve the custom 404 page
ERROR_CONF="/etc/nginx/sites-available/custom_404"

sudo bash -c "cat > $ERROR_CONF" << EOF
server {
    listen 80;
    server_name _;

    # Set the root directory for your website
    root /var/www/html;

    # Custom 404 page configuration
    error_page 404 /custom_404.html;
    location = /custom_404.html {
        internal;
    }

    location / {
        try_files \$uri \$uri/ =404;
    }
}
EOF

# Enable the new configuration by creating a symbolic link
sudo ln -sf /etc/nginx/sites-available/custom_404 /etc/nginx/sites-enabled/

# Remove the default Nginx site configuration if it exists
sudo rm -f /etc/nginx/sites-enabled/default

# Test Nginx configuration for syntax errors
sudo nginx -t

# Reload Nginx to apply the new configuration
sudo systemctl reload nginx

# Ensure Nginx starts on boot
sudo systemctl enable nginx

# Wait a few seconds to let Nginx apply the configuration
sleep 3

# Test if the custom 404 page is working
HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}" http://localhost/xyz)
CUSTOM_PAGE_CONTENT=$(curl -s http://localhost/xyz)

# Check if the status code is 404 and the content is correct
if [ "$HTTP_STATUS" -eq 404 ] && [[ "$CUSTOM_PAGE_CONTENT" == "Ceci n'est pas une page" ]]; then
    echo "Custom 404 page configured successfully."
else
    echo "Error: Custom 404 page configuration failed."
    exit 1
fi
