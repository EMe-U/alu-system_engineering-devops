#!/usr/bin/env bash
#
# This script configures Nginx to serve a custom 404 error page

# Update package list and install Nginx
apt update -y
apt install -y nginx

# Create a custom 404 error page
CUSTOM_404_PAGE="/var/www/html/custom_404.html"
mkdir -p /var/www/html
echo "Ceci n'est pas une page" > $CUSTOM_404_PAGE

# Create a new Nginx configuration file for the custom 404 page
ERROR_CONF="/etc/nginx/sites-available/custom_404"

cat > $ERROR_CONF << EOF
server {
    listen 80;
    server_name _;

    # Set the root directory for your website
    root /var/www/html;

    # Serve the custom 404 page for all not found requests
    error_page 404 /custom_404.html;

    location /custom_404.html {
        internal;
    }

    location / {
        try_files \$uri \$uri/ =404;
    }
}
EOF

# Enable the new configuration
ln -sf /etc/nginx/sites-available/custom_404 /etc/nginx/sites-enabled/

# Remove the default Nginx site configuration if it exists
rm -f /etc/nginx/sites-enabled/default

# Test Nginx configuration for syntax errors
nginx -t

# Restart Nginx to apply the new configuration
service nginx restart

# Wait a moment for Nginx to fully reload
sleep 3

# Test if the custom 404 page is working
TEST_URL="http://localhost/xyz"
HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $TEST_URL)
CUSTOM_PAGE_CONTENT=$(curl -s $TEST_URL)

# Check if the status code is 404 and the content matches
if [ "$HTTP_STATUS" -eq 404 ] && [[ "$CUSTOM_PAGE_CONTENT" == "Ceci n'est pas une page" ]]; then
    echo "Custom 404 page configured successfully with content: '$CUSTOM_PAGE_CONTENT'"
else
    echo "Error: Custom 404 page configuration failed."
    echo "Status Code: $HTTP_STATUS"
    echo "Content: $CUSTOM_PAGE_CONTENT"
    exit 1
fi
